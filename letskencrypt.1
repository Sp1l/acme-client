.Dd $Mdocdate$
.Dt LETSKENCRYPT 1
.Os
.Sh NAME
.Nm letskencrypt
.Nd secure Let's Encrypt client
.\" .Sh LIBRARY
.\" For sections 2, 3, and 9 only.
.\" Not used in OpenBSD.
.Sh SYNOPSIS
.Nm letskencrypt
.Op Fl vn
.Op Fl C Ar challengedir
.Op Fl c Ar certdir
.Op Fl f Ar accountkey
.Op Fl k Ar domainkey
.Ar domain
.Op Ar altnames...
.Sh DESCRIPTION
The
.Nm
utility submits an X509 certificate for
.Ar domain
and its alternate DNS names
.Ar altnames
to a
.Dq Let's Encrypt
server for automated signing.
It must be run as root.
.Pp
By default, it uses
.Pa /var/www/letsencrypt
for responding to challenges
.Pq Fl C ,
.Pa /etc/ssl/letsencrypt
for the public certificate directory
.Pq Fl c ,
.Pa /etc/ssl/letsencrypt/private/privkey.pem
for the domain private key
.Pq Fl k ,
and
.Pa /etc/letsencrypt/privkey.pem
for the account private key
.Pq Fl f .
Its arguments are as follows:
.Bl -tag -width Ds
.It Fl v
Verbose operation.
Specify twice to also trace communication and data transfers.
.It Fl n
Create a new account key.
This will fail if a file already exists in the account key's place.
.It Fl C Ar challengedir
Where to register challenges.
See
.Sx Challenges
for details.
.It Fl c Ar certdir
Where to put public certificates.
See
.Sx Certificates
for details.
.It Fl f Ar accountkey
The account private key.
This was either made with a previous
.Dq Let's Encrypt
client or with
.Fl n .
.It Fl k Ar domainkey
The private key for the domain.
.It Ar domain
The domain name.
The only difference between this and the
.Ar altnames
is that it's put into the certificate's
.Li CN
field.
.It Ar altnames
Alternative names
.Pq Dq SAN
for the domain name.
The number of SAN entries is limited by
.Dq Let's Encrypt
to 100 or so.
.El
.Pp
The process by which
.Nm
obtains signed certificates is roughly as follows.
In this, the
.Dq CA
is the ACME server for Let's Encrypt.
See
.Sx IMPLEMENTATION NOTES
for the details.
.Bl -enum
.It
Access the CA (unauthenticated) and requests its list of resources.
.It
Optionally create and register a new RSA account key.
.It
Read and process the RSA account key.
This is used to authenticate each subsequent communication to the CA.
.It
For each domain name,
.Bl -enum
.It
submit a challenge for authentication to the CA,
.It
create a challenge response file,
.It
wait until the CA has verified the challenge.
.El
.It
Read and extract the RSA domain key.
.It
Create an X509 request from the doman key for the domain and its
alternative names.
.It
Submit a request for signature to the CA.
.It
Download the signed X509 certificate.
.It
Extract the CA issuer from the X509 certificate.
.It
Download the certificate chain from the issuer.
.El
.
.
.Ss Challenges
Let's Encrypt uses challenges to verify that the submitter has access to
the registered domains.
.Nm
implements only the
.Dq http-01
challenge type, where a file is created within a directory accessible by
a locally-run web server configured for the requested domain.
For example, for the domain
.Dq foo.com
and alternate
.Dq www.foo.com
and the default challenge directory, an Apache configuration snippet
might be as follows:
.Bd -literal
<VirtualHost *:80>
  [...]
  ServerName foo.com
  ServerAlias www.foo.com
  Alias /.well-known/acme-challenge /var/www/letsencrypt
  <Directory /var/www/letsencrypt>
    Options None
    AllowOverride None
    Order allow,deny
    Allow from all
  </Directory>
</VirtualHost>
.Ed
.Pp
This way, the files placed in
.Pa /var/www/letsencrypt
will be properly mapped by the web server when the Let's Encrypt
responds to a challenge.
.
.
.Ss Certificates
Public certificates (domain certificate, chain, and the full-chain) are
placed by default in
.Pa /etc/ssl/letsencrypt
as
.Pa cert.pem ,
.Pa chain.pem ,
and
.Pa fullchain.pem ,
respectively.
These are all created as the root user with mode 444.
.Pp
An nginx configuration using these might be as follows:
.Bd -literal
server {
  listen 443;
  server_name foo.com www.foo.com;
  [...]
  ssl_certificate /etc/ssl/letsencrypt/fullchain.pem;
  ssl_certificate_key /etc/ssl/letsencrypt/private/privkey.pem;
}
.Ed
.Pp
None of these certificates are
.Em ever
examined by
.Nm :
only the domain private key is used when generating certificates and
talking to the
.Dq Let's Encrypt
server.
.\" .Sh CONTEXT
.\" For section 9 functions only.
.Sh IMPLEMENTATION NOTES
The
.Nm
utility follows a model of strict isolation between components.
There are five such components, each of which is started in a
subprocess.
Each subprocess is created in a
.Xr chroot 2
file-system jail, privilege-dropped, and sandboxed according to the
operating system.
.Bl -tag -width Ds
.It Network process.
Manages communication with the Let's Encrypt server.
This is not allowed to create any files on the file system.
It communicates with all other process using pipes.
This process is jailed in a temporary directory in
.Pa /tmp
that consists only of files needed for DNS resolution.
It drops user privileges to the
.Dq nobody
user.
.It Certificate process.
Translates certificates into PEM files and transfers them to the file
process.
Also extracts the CA issuer name from the certificate and transfers it
to the network process for downloading.
This process is jailed in
.Pa /var/empty
and sandboxed to do nothing at all.
It drops user privileges to the
.Dq nobody
user.
.It File process.
Manages public certificate and certificate chain files.
This process is jailed in the certificate directory and can only create
and rename files.
Each domain certificate is written into a temporary file then atomically
renamed into the real certificate with
.Xr rename 2 .
It is sandboxed to prevent any non-file related operations.
.It Domain key process.
Reads and parses the RSA private key for the domain.
This is used for creating the X509 request.
After opening the private key file, this is jailed in
.Pa /var/empty
and sandboxed to do nothing at all.
It drops user privileges to the
.Dq nobody
user.
.It Account key process.
Reads and parses the RSA private key for the account.
This is responsible for signing messages submitted by the network
process and creating
.Dq thumbprint
digests used by the challenge process.
After opening the private key file, this is jailed in
.Pa /var/empty
and sandboxed to do nothing at all.
It drops user privileges to the
.Dq nobody
user.
.It Challenge process.
This process creates and deletes challenge files.
It is jailed in the challenge directory and sandboxed to do nothing but
create and remove files.
.El
.\" Not used in OpenBSD.
.\" .Sh RETURN VALUES
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.\" .Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.\" .Sh EXAMPLES
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.Sh SEE ALSO
.Xr openssl 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.Sh CAVEATS
On Mac OS X and Linux, the network process is not put into a
.Xr chroot 2
jail.
This is due to limitations in how DNS resolution occurs on these
systems.
Moreover, for Mac OS X, the sandbox for several components must be
weakened from that of full-computation to no-network because the sandbox
cannot be enacted within a
.Xr chroot 2 .
There is no sandbox at all for Linux. 
.Pp
In summary, running this on anything but OpenBSD is not advised.
.Sh BUGS
The challenge and certificate processes retain their privileges, as I'm
not sure which credentials to use otherwise.
.Pp
Since certificates are never examined (only private keys),
.Nm
doesn't know when the certificate is going to expire.
This, for now, is left as an exercise to the operator.
.\" .Sh SECURITY CONSIDERATIONS
.\" Not used in OpenBSD.
